diff --git a/Makefile b/Makefile
index 53998ac31..bc38f616a 100644
--- a/Makefile
+++ b/Makefile
@@ -471,7 +471,9 @@ ifeq ($(USE_CUDA), 1)
 	endif
 	# Make sure to add stubs as fallback in order to be able to build
 	# without full CUDA install (especially if run without nvidia-docker)
-	LDFLAGS += -L/usr/local/cuda/lib64/stubs
+	# 
+	# LDFLAGS += -L/usr/local/cuda/lib64/stubs
+	LDFLAGS += -L$(USE_CUDA_PATH)/lib64/stubs
 	ifeq ($(USE_NCCL), 1)
 		ifneq ($(USE_NCCL_PATH), NONE)
 			CFLAGS += -I$(USE_NCCL_PATH)/include
diff --git a/make/config.mk b/make/config.mk
index d4431a971..c894dc1e3 100644
--- a/make/config.mk
+++ b/make/config.mk
@@ -67,32 +67,32 @@ ADD_CFLAGS =
 #---------------------------------------------
 
 # whether use CUDA during compile
-USE_CUDA = 0
+USE_CUDA = 1
 
 # add the path to CUDA library to link and compile flag
 # if you have already add them to environment variable, leave it as NONE
 # USE_CUDA_PATH = /usr/local/cuda
-USE_CUDA_PATH = NONE
+USE_CUDA_PATH = $(EBROOTCUDA)
 
 # whether to enable CUDA runtime compilation
 ENABLE_CUDA_RTC = 1
 
 # whether use CuDNN R3 library
-USE_CUDNN = 0
+USE_CUDNN = 1
 
 #whether to use NCCL library
-USE_NCCL = 0
+USE_NCCL = 1
 #add the path to NCCL library
-USE_NCCL_PATH = NONE
+USE_NCCL_PATH = $(EBROOTNCCL)
 
 # whether use opencv during compilation
 # you can disable it, however, you will not able to use
 # imbin iterator
 USE_OPENCV = 1
 # Add OpenCV include path, in which the directory `opencv2` exists
-USE_OPENCV_INC_PATH = NONE
+USE_OPENCV_INC_PATH = $(EBROOTOPENCV)/include/
 # Add OpenCV shared library path, in which the shared library exists
-USE_OPENCV_LIB_PATH = NONE
+USE_OPENCV_LIB_PATH = $(EBROOTOPENCV)/lib64/
 
 #whether use libjpeg-turbo for image decode without OpenCV wrapper
 USE_LIBJPEG_TURBO = 0
@@ -105,7 +105,7 @@ USE_OPENMP = 1
 # whether use MKL-DNN library: 0 = disabled, 1 = enabled
 # if USE_MKLDNN is not defined, MKL-DNN will be enabled by default on x86 Linux.
 # you can disable it explicity with USE_MKLDNN = 0
-USE_MKLDNN =
+USE_MKLDNN = 0  # this is unlikely to be useful on GPU machines
 
 # whether use NNPACK library
 USE_NNPACK = 0
@@ -113,23 +113,18 @@ USE_NNPACK = 0
 # choose the version of blas you want to use
 # can be: mkl, blas, atlas, openblas
 # in default use atlas for linux while apple for osx
-UNAME_S := $(shell uname -s)
-ifeq ($(UNAME_S), Darwin)
-USE_BLAS = apple
-else
-USE_BLAS = atlas
-endif
+USE_BLAS = mkl
 
 # whether use lapack during compilation
 # only effective when compiled with blas versions openblas/apple/atlas/mkl
 USE_LAPACK = 1
 
 # path to lapack library in case of a non-standard installation
-USE_LAPACK_PATH =
+USE_LAPACK_PATH = $(EBROOTIMKL)/compilers_and_libraries/linux/mkl/lib/intel64_lin/
 
 # add path to intel library, you may need it for MKL, if you did not add the path
 # to environment variable
-USE_INTEL_PATH = NONE
+USE_INTEL_PATH = $(EBROOTIMKL)
 
 # If use MKL only for BLAS, choose static link automatically to allow python wrapper
 ifeq ($(USE_BLAS), mkl)
@@ -162,7 +157,7 @@ USE_F16C =
 #----------------------------
 
 # whether or not to enable multi-machine supporting
-USE_DIST_KVSTORE = 0
+USE_DIST_KVSTORE = 1
 
 # whether or not allow to read and write HDFS directly. If yes, then hadoop is
 # required
@@ -196,7 +191,7 @@ USE_GPERFTOOLS_STATIC =
 USE_JEMALLOC = 1
 
 # path to jemalloc library in case of a non-standard installation
-USE_JEMALLOC_PATH =
+USE_JEMALLOC_PATH = ~/.nix-profile/lib/
 
 # Link jemalloc statically
 USE_JEMALLOC_STATIC =

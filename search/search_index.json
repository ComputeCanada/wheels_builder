{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"wheels_builder","text":"<p>Scripts to automate building Python wheels for DRAC's wheelhouse.</p> <p>Documentation:</p> <code>build_wheels.sh</code> Build wheel(s) for a Python package. <code>wheel_architecture.sh</code> Analyzes the content of the wheel and tries to predict into which sub-directory of our wheelhouse the wheel needs to be placed. <code>cp_wheels.sh</code> Copy wheels in the current directory to the wheelhouse. <code>parbuild_wheel.sh</code> Build multiple versions and/or multiple wheels in parallel. <code>unmanylinuxize.sh</code> Download a <code>manylinux</code> wheel and patch it. <code>config/&lt;package&gt;.sh</code> Configuration file to provide customization or specific steps/actions needed to build a wheel. <code>manipulate_wheels.py</code> Manipulate a wheel, mainly to update its metadata and requirements."},{"location":"#tldr","title":"TLDR","text":"<ol> <li>Build a wheel for a specific version: <pre><code>bash build_wheels.sh --package &lt;name&gt; --version &lt;version&gt; --verbose 3\n</code></pre></li> </ol>"},{"location":"build_wheels/","title":"<code>build_wheels.sh</code>","text":"<p>Build wheel(s) for a Python package.</p> <p>This script will:</p> <ul> <li>Create a build-virtualenv based on the Python version and install any dependencies.</li> <li>Download the package from PyPI (by default), either the version specified or else the latest.</li> <li>Build the wheel.</li> <li>Add the <code>+computecanada</code> to the wheel name.</li> <li>install the wheel into the build-virtualenv and try to import it.</li> </ul> <p>By default,</p> <ul> <li>it tries to build wheels for Python 3.11 to 3.13;</li> <li>all downloaded dependencies will be built.</li> </ul> <p>To build AVX512-optimized wheels, do <code>module load arch/avx512</code> before calling <code>build_wheel.sh</code>. This has no effect on generic packages, i.e. those that do not contain compiled libraries and do not link external ones.</p> <p><code>build_wheel.sh</code> assumes that the package name is also the first part of the  downloaded archive, the directory name of the extracted archive and the name of the module when imported, however for importing it also try some variants by  trying some prefixes or suffixes (python, py, Py, 2).</p> <p>While these assumptions work surprisingly well, many packages need special treatment, by creating a <code>package.sh</code> file in the <code>config/</code> directory, which will be sourced and can therefore be used to configure the build. In these variations of the package-, archive-, folder-, import-name can be specified as well as differing download-, build-, and test-commands. See the variable section for a list of options.</p>"},{"location":"build_wheels/#examples","title":"Examples","text":""},{"location":"build_wheels/#build-latest","title":"Build latest","text":"<p>Builds the latest version from PyPI: <pre><code>$ bash build_wheel.sh --package biopython\n</code></pre></p>"},{"location":"build_wheels/#build-specific-version","title":"Build specific version","text":"<p>Builds the version <code>1.84</code> from PyPI for the default python versions (3.11, 3.12, 3.13): <pre><code>$ bash build_wheel.sh --package biopython --version 1.84 --verbose 3\n</code></pre></p>"},{"location":"build_wheels/#build-specific-python-version","title":"Build specific python version","text":"<p>Builds the latest version from PyPI with Python 3.13. Builds dependencies recursively for Python 3.13 as well. <pre><code>$ bash build_wheel.sh --package biopython --python 3.13 --verbose 3\n</code></pre></p>"},{"location":"build_wheels/#disable-recursive-builds","title":"Disable recursive builds","text":"<p>By default, all downloaded dependencies will be built. This can be disabled with: <pre><code>$ bash build_wheel.sh --package biopython --recursive 0\n</code></pre></p>"},{"location":"build_wheels/#submit-a-build-job","title":"Submit a build job","text":"<p>Your time matters, a build job can be submitted with: <pre><code>$ bash build_wheel.sh --package biopython --verbose 3 --job\nSubmitted batch job 4680\n</code></pre> By default, the job uses <code>1</code> cpu and <code>3Gb</code> of memory. A log file containing the job output (<code>biopython-4680.log</code>) will be created in the current directory.</p>"},{"location":"build_wheels/#specifying-resources","title":"Specifying resources","text":"<p>One can request more resources with: <pre><code>$ bash build_wheel.sh --package biopython --verbose 3 --job --job-cores 4 --mem-cpu 8G\n</code></pre></p>"},{"location":"config/","title":"configurations","text":"<p>Configuration file are useful to provide customization or specific steps/actions needed for a wheel to be built. One can create version specific configuration using: <code>package-version.sh</code> or general one using: <code>package.sh</code>.</p> <p><code>build_wheel.sh</code> will try to source (case insensitively) in the following order: 1. <code>${PACKAGE}-${VERSION}.sh</code> then; 2. <code>${PACKAGE}.sh</code></p> <p>from the <code>config</code> directory.</p> <p>To see examples on how to use these options, just <code>grep</code> through the <code>config/*.sh</code> files to find other recipes that use them.</p>"},{"location":"config/#variables","title":"Variables","text":"Variable Description <code>PACKAGE</code> Name of the package. Defaults to the value of <code>--package</code>. <code>VERSION</code> Version of the package. Defaults to the value of <code>--version</code> or latest. <code>PYTHON_VERSIONS</code> List of Python versions, for which the wheel is to be built. Defaults to the value of <code>--python</code> (if set) or default python versions (ie 3.11,3.12,3.13). <code>BDIST_WHEEL_ARGS</code> Extra arguments to pass to <code>python setup.py bdist_wheel $BDIST_WHEEL_ARGS</code>. <code>PIP_WHEEL_ARGS</code> Extra arguments to pass to <code>pip wheel $PIP_WHEEL_ARGS</code>. <code>MODULE_BUILD_DEPS</code> Loads these modules for building the wheel. <code>MODULE_BUILD_DEPS_DEFAULT</code> Is set to <code>numpy/.2.1.1 python-build-bundle pytest cython/.3.0.11</code> <code>MODULE_RUNTIME_DEPS</code> Loads these modules for building and testing the wheel. <code>PACKAGE_DOWNLOAD_CMD</code> Custom download command, e.g. <code>git clone ...</code>. (default: <code>pip download --no-cache --no-binary \\$PACKAGE_DOWNLOAD_ARGUMENT --no-deps \\$PACKAGE_DOWNLOAD_ARGUMENT</code>) <code>PACKAGE_DOWNLOAD_ARGUMENT</code> Additional argument to pass to <code>pip download</code>. <code>PACKAGE_DOWNLOAD_NAME</code> In case downloaded name is different from <code>$PACKAGE</code>, e.g. <code>v${VERSION}.tar.gz</code> (default: <code>$PACKAGE</code>) <code>PACKAGE_DOWNLOAD_METHOD</code> Use <code>pip download</code> (default) or specify <code>Git</code> <code>PACKAGE_FOLDER_NAME</code> In case extracted folder has a name different from <code>$PACKAGE</code>. (default: <code>$PACKAGE</code>) <code>PACKAGE_SUFFIX</code> Add this suffix to our package name, e.g. <code>-cpu</code> or <code>-gpu</code>. (default: \"\") <code>PATCHES</code> Applies these patch-files before building. Specify as a single or list of patch files, that have been placed in the <code>patches/</code> directory. <code>PATCH_WHEEL_COMMANDS</code> Specify shell commands to patch a wheel in order to make it compatible with our stack. <code>PRE_DOWNLOAD_COMMANDS</code> Specify shell commands to be executed before downloading the package. <code>POST_DOWNLOAD_COMMANDS</code> Specify shell commands to be executed after downloading the package. <code>PRE_BUILD_COMMANDS</code> Specify shell commands to be executed before downloading the package. <code>POST_BUILD_COMMANDS</code> Specify shell commands to be executed after building the package. <code>PRE_SETUP_COMMANDS</code> Specify shell commands to be executed before setting up build environment. <code>PYTHON_DEPS</code> Installs these Python-dependencies into the virtualenv in addition to <code>PYTHON_DEPS_DEFAULT</code>. <code>PYTHON_DEPS_DEFAULT</code> Is set to <code>\"\"</code>. <code>PYTHON_IMPORT_NAME</code> In case <code>import $NAME</code> is different from the package name, e.g. <code>PACKAGE=pyzmq</code> vs. <code>import zmq</code>. (default: <code>$PACKAGE</code>) <code>PYTHON_TESTS</code> String with Python command(s) to test the package. Executed after <code>import $PYTHON_IMPORT_NAME</code>. <code>RPATH_ADD_ORIGIN</code> This will run <code>setrpaths.sh --path ${WHEEL_NAME} --add_origin</code>. <code>RPATH_TO_ADD</code> This will run <code>setrpaths.sh --path ${WHEEL_NAME} --add_path $RPATH_TO_ADD</code>. <code>TEST_COMMAND</code> Alternative shell command to test the wheel. <code>UPDATE_REQUIREMENTS</code> One or more requirements to update. These will be changed by <code>manipulate_wheels.py</code> after the wheel is done building."},{"location":"cp_wheels/","title":"<code>cp_wheels.sh</code>","text":"<p>Copies all wheels in the current directory to the predicted location in the wheelhouse after adjusting the permissions. </p>"},{"location":"cp_wheels/#usage","title":"Usage","text":"<pre><code>Usage: cp_wheels.sh [--wheel &lt;wheel file&gt;] [--arch generic|&lt;rsnt_arch&gt;]\n                    [--remove] [--dry-run]\n\n   --wheel &lt;wheel file&gt;       Process only this wheel (otherwise all in the $CWD)\n   --arch generic|&lt;rsnt_arch&gt; Copy to a generic or arch-specific directory.\n   --remove                   Delete the wheel after copying.\n   --dry-run                  Just print the commands, but don't execute anything.\n</code></pre> <p>If <code>cp_wheels.sh</code> detects an arch-specific wheel, it will refuse to copy it unless the <code>--arch</code> flag is used. Choice of arch should match what was used when building the wheel (see <code>build_wheel.sh</code>). <code>cp_wheels.sh</code> considers a wheel to be arch-specific if it links external libraries not in the Gentoo or Nix compatibility layer, or if any existing wheels for the same package are in arch-specific directories in our wheelhouse.</p> <p>If <code>--wheel</code> argument is provided, then only the given file will be processed, else all <code>computecanada</code> tagged files will be processed.</p>"},{"location":"cp_wheels/#examples","title":"Examples","text":""},{"location":"cp_wheels/#copy-all-and-remove","title":"Copy all and remove","text":"<p>Will process only <code>computecanada</code> tagged wheels. <pre><code>$ bash cp_wheels.sh --remove\n</code></pre></p>"},{"location":"cp_wheels/#copy-specific-wheel","title":"Copy specific wheel","text":"<p>Warning: will copy the given wheel <pre><code>$ bash cp_wheels.sh --remove --wheel fastrlock-0.8.3+computecanada-cp313-cp313-linux_x86_64.whl\n</code></pre></p>"},{"location":"cp_wheels/#copy-to-specific-arch","title":"Copy to specific arch","text":"<pre><code>$ bash cp_wheels.sh --remove --arch x86-64-v3 --wheel &lt;name&gt;\n</code></pre>"},{"location":"cp_wheels/#copy-multiple-matched-wheels","title":"Copy multiple matched wheels","text":"<p>Useful to copy only a subset of wheels. <pre><code>parallel bash cp_wheels.sh --remove --wheel ::: alphafold3-3.0.1+computecanada-cp31* numpy-*.whl\n</code></pre></p>"},{"location":"manipulate_wheels/","title":"<code>manipulate_wheels.py</code>","text":"<p>This script allow one to manipulate a wheel file, mainly to update its metadata and requirements. For example, one can add, remove and update requirements.</p>"},{"location":"manipulate_wheels/#usage","title":"Usage","text":"<pre><code>$ ./manipulate_wheels.py -h\nusage: manipulate_wheels [-h] -w WHEELS [WHEELS ...] [-i] [-u UPDATE_REQ [UPDATE_REQ ...]] [-a ADD_REQ [ADD_REQ ...]] [-r REMOVE_REQ [REMOVE_REQ ...]] [--set_min_numpy SET_MIN_NUMPY] [--set_lt_numpy SET_LT_NUMPY] [--inplace] [--force] [-p] [-v] [-t TAG]\n\nManipulate wheel files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -w WHEELS [WHEELS ...], --wheels WHEELS [WHEELS ...]\n                        Specifies which wheels to patch (default: None)\n  -i, --insert_local_version\n                        Adds the +computecanada local version (default: False)\n  -u UPDATE_REQ [UPDATE_REQ ...], --update_req UPDATE_REQ [UPDATE_REQ ...]\n                        Updates requirements of the wheel. (default: None)\n  -a ADD_REQ [ADD_REQ ...], --add_req ADD_REQ [ADD_REQ ...]\n                        Add requirements to the wheel. (default: None)\n  -r REMOVE_REQ [REMOVE_REQ ...], --remove_req REMOVE_REQ [REMOVE_REQ ...]\n                        Remove requirements from the wheel. (default: None)\n  --set_min_numpy SET_MIN_NUMPY\n                        Sets the minimum required numpy version. (default: None)\n  --set_lt_numpy SET_LT_NUMPY\n                        Sets the lower than (&lt;) required numpy version. (default: None)\n  --inplace             Work in the same directory as the existing wheel instead of a temporary location (default: False)\n  --force               If combined with --inplace, overwrites existing wheel if the resulting wheel has the same name (default: False)\n  -p, --print_req       Prints the current requirements (default: False)\n  -v, --verbose         Displays information about what it is doing (default: False)\n  -t TAG, --add_tag TAG\n                        Specifies a tag to add to wheels (default: None)\n</code></pre>"},{"location":"manipulate_wheels/#examples","title":"Examples","text":""},{"location":"manipulate_wheels/#print-requirements","title":"Print requirements","text":"<pre><code>$ ./manipulate_wheels.py -p -w biopython-*.whl \nResulting wheels will be in directory ./tmp\nRequirements for wheel biopython-1.84+computecanada-cp312-cp312-linux_x86_64.whl:\n==========================\nnumpy\n==========================\n</code></pre>"},{"location":"manipulate_wheels/#add-requirement","title":"Add requirement","text":"<pre><code>$ ./manipulate_wheels.py --inplace --force --add_req 'numpy' -w wheel-0.45.1-py3-none-any.whl \nSince --force was used, overwriting existing wheel\nNew wheel created wheel-0.45.1-py3-none-any.whl\n\n$ ./manipulate_wheels.py -p -w wheel-0.45.1-py3-none-any.whl \nResulting wheels will be in directory ./tmp\nRequirements for wheel wheel-0.45.1-py3-none-any.whl:\n==========================\npytest &gt;= 6.0.0 ; extra == \"test\"\nsetuptools &gt;= 65 ; extra == \"test\"\nnumpy\n==========================\n</code></pre>"},{"location":"manipulate_wheels/#remove-requirement","title":"Remove requirement","text":"<pre><code>$ ./manipulate_wheels.py --inplace --force --remove_req 'numpy' -w wheel-0.45.1-py3-none-any.whl \nwheel-0.45.1-py3-none-any.whl: requirement numpy found. Removing it\nSince --force was used, overwriting existing wheel\nNew wheel created wheel-0.45.1-py3-none-any.whl\n\n$ ./manipulate_wheels.py -p -w wheel-0.45.1-py3-none-any.whl \nResulting wheels will be in directory ./tmp\nRequirements for wheel wheel-0.45.1-py3-none-any.whl:\n==========================\npytest &gt;= 6.0.0 ; extra == \"test\"\nsetuptools &gt;= 65 ; extra == \"test\"\n==========================\n</code></pre>"},{"location":"manipulate_wheels/#update-requirement","title":"Update requirement","text":"<p>Useful to adjust a version or relaxing a requirement, by removing its version specifier.</p> <pre><code>$ ./manipulate_wheels.py -p -w wheel-0.45.1-py3-none-any.whl \nResulting wheels will be in directory ./tmp\nRequirements for wheel wheel-0.45.1-py3-none-any.whl:\n==========================\npytest &gt;= 6.0.0 ; extra == \"test\"\nsetuptools &gt;= 65 ; extra == \"test\"\n==========================\n\n$ ./manipulate_wheels.py --inplace --force --update_req 'setuptools' -w wheel-0.45.1-py3-none-any.whl \nSince --force was used, overwriting existing wheel\nNew wheel created wheel-0.45.1-py3-none-any.whl\n\n$ ./manipulate_wheels.py -p -w wheel-0.45.1-py3-none-any.whl \nResulting wheels will be in directory ./tmp\nRequirements for wheel wheel-0.45.1-py3-none-any.whl:\n==========================\npytest &gt;= 6.0.0 ; extra == \"test\"\nsetuptools\n==========================\n</code></pre>"},{"location":"manipulate_wheels/#rename-requirement","title":"Rename requirement","text":"<p>Rename a requirement, and update a requirement version:</p> <p>Note: the special separator <code>-&gt;</code> in order to rename a requirement. <pre><code>$ ./manipulate_wheels.py -v -w wheel-0.2.2-py3-none-any.whl -u \"faiss-cpu-&gt;faiss\" \"tensorflow (&gt;=2.2.2)\"\nResulting wheels will be in directory ./tmp\nwheel-0.2.2-py3-none-any.whl: updating requirement faiss-cpu to faiss\nwheel-0.2.2-py3-none-any.whl: updating requirement tensorflow (&gt;=2.2.0) to tensorflow (&gt;=2.2.2)\nNew wheel created tmp/wheel-0.2.2-py3-none-any.whl\n</code></pre></p>"},{"location":"manipulate_wheels/#insert-local-tag-computecanada","title":"Insert local tag (<code>computecanada</code>) :","text":"<pre><code>$ ./manipulate_wheels.py --inplace -i -w wheel-0.2.2-py3-none-any.whl \nNew wheel created wheel-0.2.2+computecanada-py3-none-any.whl\n</code></pre>"},{"location":"manipulate_wheels/#insert-custom-tag","title":"Insert custom tag:","text":"<pre><code>$ ./manipulate_wheels.py --inplace --add_tag custom -w wheel-0.45.1-py3-none-any.whl \nNew wheel created wheel-0.45.1+custom-py3-none-any.whl\n</code></pre>"},{"location":"parbuild_wheel/","title":"<code>parbuild_wheel.sh</code>","text":"<p>Build multiple versions and/or multiple wheels in parallel. The script will use as many cores available as possible to run the builds.</p>"},{"location":"parbuild_wheel/#usage","title":"Usage","text":"<pre><code>Usage: parbuild_wheel.sh \n  --package &lt;comma separated list of package name&gt;\n  [--version &lt;comma separated list of versions&gt;]\n  [--python &lt;comma separated list of python versions&gt;]\n  [--requirements &lt;requirements file&gt;\n</code></pre>"},{"location":"parbuild_wheel/#examples","title":"Examples","text":""},{"location":"parbuild_wheel/#all-default-python-versions-in-parallel","title":"All default python versions in parallel","text":"<pre><code>$ bash parbuild_wheel.sh --package &lt;name&gt;\n</code></pre>"},{"location":"parbuild_wheel/#multiple-packages","title":"Multiple packages","text":"<pre><code>$ bash parbuild_wheel.sh --package &lt;n1&gt;,&lt;n2&gt;,&lt;n3&gt;,...\n</code></pre>"},{"location":"parbuild_wheel/#multiple-version-of-a-package","title":"Multiple version of a package","text":"<pre><code>$ bash parbuild_wheel.sh --package &lt;name&gt; --version 1.0.0,1.0.1\n</code></pre>"},{"location":"parbuild_wheel/#specific-python-versions","title":"Specific python versions","text":"<pre><code>$ bash parbuild_wheel.sh --package &lt;name&gt; --python 3.12,3.13\n</code></pre>"},{"location":"parbuild_wheel/#from-a-requirements-file","title":"From a requirements file","text":"<p>Will build <code>package==version</code> for all default python. <pre><code>$ bash parbuild_wheel.sh --requirements requirements.txt\n</code></pre></p>"},{"location":"unmanylinuxize/","title":"<code>unmanylinuxize.sh</code>","text":"<p>This script allow one to download a <code>manylinux</code> wheel and patch it.</p> <p>optimization</p> <p>Prefer to build with <code>build_wheels.sh</code> (and source) when possible.</p> <p>A number of (difficult to build) Python packages are distributed as binary wheels that are compatible with many common Linux distributions and therefore tagged  with <code>manylinux</code> in the filename. These are -- out of the box -- incompatible with the software stack, because most of our libraries live in different locations.</p> <p>However this script can download and patch <code>manylinux</code> wheels (basically by  treating them with the <code>setrpaths.sh</code> script), thereby trying to make them  compatible with the software stack.</p>"},{"location":"unmanylinuxize/#usage","title":"Usage","text":"<pre><code>Usage: unmanylinuxize.sh \n  --package &lt;package name&gt; \n  [--version &lt;version&gt;]\n  [--python &lt;comma separated list of python versions&gt;]\n  [--add_path &lt;add rpath&gt;]\n  [--add_origin &lt;add origin to rpath&gt;]\n  [--find_links https://index.url | --url https://direct.url.to.wheel.whl ]\n</code></pre> <p><code>--find-links</code> set <code>PIP_FIND_LINKS</code> and can be useful to search an alternative index then PyPI.</p> <p><code>--url</code> allows one to directly download a specific wheel file with <code>wget</code></p>"},{"location":"unmanylinuxize/#examples","title":"Examples","text":""},{"location":"unmanylinuxize/#specific-version","title":"Specific version","text":"<pre><code>bash unmanylinuxize.sh --package sktime --version 0.21.1\n</code></pre>"},{"location":"unmanylinuxize/#specific-python-version","title":"Specific python version","text":"<pre><code>bash unmanylinuxize.sh --package sktime --version 0.21.1 --python 3.11\n</code></pre>"},{"location":"unmanylinuxize/#add-rpath","title":"Add rpath","text":"<pre><code>$ module load cuda/12 cudnn/9  # important to load prior\n$ bash unmanylinuxize.sh --package open3d --add_path $EBROOTCUDACORE/lib/:$EBROOTCUDNN/lib\n</code></pre>"},{"location":"unmanylinuxize/#with-config-file","title":"With config file","text":"<p>Some package may benefit from having a configuration, ie jaxlib <pre><code>$ bash unmanylinuxize.sh --package ray \nINFO: Sourced configuration /home/coulombc/wheels_builder/config/ray.sh\n...\n</code></pre></p>"},{"location":"unmanylinuxize/#with-extra-index","title":"With extra index","text":""},{"location":"unmanylinuxize/#find-links","title":"find-links","text":"<p>If a package is available on an extra index, such as nvidia index <pre><code>$ bash unmanylinuxize.sh --package &lt;name&gt; --find-links https://pypi.nvidia.com\n</code></pre></p>"},{"location":"unmanylinuxize/#direct-url","title":"Direct URL","text":"<p>If a package is available from a release on Github, it can be downloaded with: <pre><code>$ bash unmanylinuxize.sh --package &lt;name&gt; --url &lt;url&gt;/&lt;name&gt;.whl\n</code></pre></p>"},{"location":"wheel_architecture/","title":"<code>wheel_architecture.sh</code>","text":"<p>Analyzes the content of the wheel and tries to make some prediction into which sub-directory of our wheelhouse the wheel needs to be placed.</p>"},{"location":"wheel_architecture/#usage","title":"Usage","text":"<pre><code>Usage: wheel_architecture.sh  &lt;FILENAME&gt;.whl\n</code></pre> Layer Arch Description generic generic Generic in terms of nix/gentoo prefix as well as for architecture nix generic requires NIX but is not architecture dependent gentoo generic requires Gentoo prefix but is not architecture dependent nix avx2 requires NIX and depends on libraries located in arch/avx2 ... ... ... gentoo2023 generic requires Gentoo 2023 but is not architecture dependent. May contains <code>x86-64-v3</code> optimizations. gentoo2023 x86-64-v3 requires Gentoo 2023 and depends on libraries located in <code>x86-64-v3</code> gentoo2023 x86-64-v4 requires Gentoo 2023 and depends on libraries located in  <code>x86-64-v4</code> <p>Note</p> <p>While the script tries to make a good job, there are cases e.g. when a wheel depends on a certain library or certain version of a library that is available only  in one of the NIX or Gentoo layers but not the other, where it makes a wrong prediction.</p> <p>Make sure to test it!</p>"},{"location":"wheel_architecture/#examples","title":"Examples","text":""},{"location":"wheel_architecture/#pure-python-wheel","title":"Pure Python wheel","text":"<p><pre><code>$ bash wheel_architecture.sh transformers-4.49.0+computecanada-py3-none-any.whl\ngeneric generic\n</code></pre> This generic wheels contains no extension nor SOs that depend on a library.</p>"},{"location":"wheel_architecture/#arch-specific","title":"Arch specific","text":"<p><pre><code>$ bash wheel_architecture.sh pyFFTW-0.13.1+computecanada-cp311-cp311-linux_x86_64.whl\n...\ngentoo2023 x86-64-v3\n</code></pre> This wheel depends on FFTW libraries.</p>"},{"location":"wheel_architecture/#missing-so","title":"Missing SO","text":"<p>Some package may depends on libraries that will be installed in a virtual environment. Those must be analyzed with care. <pre><code>$ bash wheel_architecture.sh torchtext-0.18.0+computecanada-cp310-cp310-linux_x86_64.whl\n./torchtext/_torchtext.so requires a glibc more recent than that provided by Gentoo 2020: 2.34 &gt; 2.30\n    libtorch_python.so =&gt; not found\n    libc10.so =&gt; not found\n    libtorch.so =&gt; not found\n    libtorch_cpu.so =&gt; not found\n    libtorch_python.so =&gt; not found\n    libc10.so =&gt; not found\n    libtorch.so =&gt; not found\n    libtorch_cpu.so =&gt; not found\n./torchtext/_torchtext.so is missing some libraries in Gentoo 2020\n./torchtext/_torchtext.so is missing some libraries in Gentoo 2023\n./torchtext/lib/libtorchtext.so requires a glibc more recent than that provided by Gentoo 2020: 2.34 &gt; 2.30\n    libc10.so =&gt; not found\n    libtorch.so =&gt; not found\n    libtorch_cpu.so =&gt; not found\n    libc10.so =&gt; not found\n    libtorch.so =&gt; not found\n    libtorch_cpu.so =&gt; not found\n./torchtext/lib/libtorchtext.so is missing some libraries in Gentoo 2020\n./torchtext/lib/libtorchtext.so is missing some libraries in Gentoo 2023\nunknown generic\n</code></pre> Since it requires a glibc 2.34 but cannot find <code>libtorch.so</code>, the script cannot correctly determine which architecture. We then need to copy it with care under <code>gentoo2023/generic</code>.</p>"}]}